var __PDF_DOC,        __PAGINA_CORRENTE,        __TOTALE_PAGINE,        __RENDERING_IN_CORSO = 0,        __CANVAS = $('#pdf-canvas').get(0),        __CANVASB = $('#pdf-canvas-big').get(0),        __CANVAS_CTX = __CANVAS.getContext('2d'),        __CANVAS_CTX_B = __CANVASB.getContext('2d');function showPDF(pdf_url) {    $("#pdf-loader").show();    PDFJS.getDocument({url: pdf_url}).then(function (pdf_doc) {        __PDF_DOC = pdf_doc;        __TOTALE_PAGINE = __PDF_DOC.numPages;        // Hide the pdf loader and show pdf container in HTML        $("#pdf-loader").hide();        $("#pdf-contents").show();        $("#pdf-total-pages").text(__TOTALE_PAGINE);        // Show the first page        showPage(1);        //showPageBig(1);    }).catch(function (error) {        // If error re-show the upload button        $("#pdf-loader").hide();        $("#upload-button").show();        alert(error.message);    });    ;}function showPage(page_no) {    __RENDERING_IN_CORSO = 1;    __PAGINA_CORRENTE = page_no;    // Disable Prev & Next buttons while page is being loaded    $("#pdf-next, #pdf-prev").attr('disabled', 'disabled');    // While page is being rendered hide the canvas and show a loading message    $("#pdf-canvas").hide();    $("#page-loader").show();    $("#download-image").hide();    // Update current page in HTML    $("#pdf-current-page").text(page_no);    // Fetch the page    __PDF_DOC.getPage(page_no).then(function (page) {        // As the canvas is of a fixed width we need to set the scale of the viewport accordingly        var scale_required = __CANVAS.width / page.getViewport(1).width;        // Get viewport of the page at required scale        var viewport = page.getViewport(scale_required);        // Set canvas height        __CANVAS.height = viewport.height;        var renderContext = {            canvasContext: __CANVAS_CTX,            viewport: viewport        };        // Render the page contents in the canvas        page.render(renderContext).then(function () {            __RENDERING_IN_CORSO = 0;            // Re-enable Prev & Next buttons            $("#pdf-next, #pdf-prev").removeAttr('disabled');            // Show the canvas and hide the page loader            $("#pdf-canvas").show();            //$("#pdf-canvas-big").show();            $("#page-loader").hide();            $("#download-image").show();        });    });}function showPageBig(page_no, tot) {    __RENDERING_IN_CORSO = 1;    //__PAGINA_CORRENTE = page_no;    // Fetch the page    __PDF_DOC.getPage(page_no).then(function (page) {        // As the canvas is of a fixed width we need to set the scale of the viewport accordingly        var scale_required1 = __CANVASB.width / page.getViewport(1).width;        // Get viewport of the page at required scale        var viewport1 = page.getViewport(scale_required1);        // Set canvas height        __CANVASB.height = viewport1.height;        var renderContext1 = {            canvasContext: __CANVAS_CTX_B,            viewport: viewport1        };        page.render(renderContext1).then(function () {            __RENDERING_IN_CORSO = 0;            // Re-enable Prev & Next buttons            //$("#pdf-next, #pdf-prev").removeAttr('disabled');            var canvasData, ajax, ext, formato;            formato = $("#_file_type").val();            if (formato === 'image/jpeg') {                canvasData = __CANVASB.toDataURL('image/jpeg');                ext = "jpg";            } else {                canvasData = __CANVASB.toDataURL();                ext = "png";            }            ajax = new XMLHttpRequest();            ajax.open("POST", window.location.href.split('#')[0] + "res/actions.php?page=" + page_no + "&action=pdf2img&ext=" + ext, false);            ajax.setRequestHeader('Content-Type', 'application/upload');            ajax.send(canvasData);            if (page_no == __TOTALE_PAGINE -1) {                $("#_gal_load").show();            }            if (page_no == __TOTALE_PAGINE) {                getGalleryTmp();            }            if (tot === 1) {                getGalleryTmp();            }            // Show the canvas and hide the page loader            //$("#pdf-canvas-big").show();            //$("#pdf-canvas-big").show();            //$("#page-loader").hide();            //$("#download-image").show();        });    });}$("#_btn_elabora").on('click', function () {    if ($("#pdf-contents").css('display') !== 'block') {        $('#_saveMsg').modal('show');        $('#_msgTitolo').text('Warning!');        $('#_msgTesto').html('Select the PDF file to process.');    } else {        $("#pdf-canvas-big").prop('width', $('#_larghezza_px').val());        if ($('#_clear_before').is(":checked")) {            clearGalleryTmp();        }        $('#_processing').modal({backdrop: 'static', keyboard: false});        $('#_processing').modal('show');        $('#_avanzamento').attr('aria-valuemax', __TOTALE_PAGINE)        $('#_avanzamento').attr('aria-valuemin', (100 / __TOTALE_PAGINE))        $('#_avanzamento').attr('aria-valuenow', 0).css('width', '0%');        timeout(1, __TOTALE_PAGINE);    }});$("#_btn_elabora_singola").on('click', function () {    if ($("#pdf-contents").css('display') !== 'block') {        $('#_saveMsg').modal('show');        $('#_msgTitolo').text('Warning!');        $('#_msgTesto').html('Select the PDF file to process.');    } else {        $("#pdf-canvas-big").prop('width', $('#_larghezza_px').val());        if ($('#_clear_before').is(":checked")) {            clearGalleryTmp();        }        $('#_processing').modal({backdrop: 'static', keyboard: false});        $('#_processing').modal('show');        $('#_avanzamento').attr('aria-valuemax', 1)        $('#_avanzamento').attr('aria-valuemin', (100 / 1))        $('#_avanzamento').attr('aria-valuenow', 0).css('width', '0%');        timeout(__PAGINA_CORRENTE, 1);    }});function timeout(i, tot) {    setTimeout(function () {        // Do Something Here        showPageBig(i, tot);        i++;        // Then recall the parent function to        // create a recursive loop.        if (i <= tot) {            $('#_avanzamento').attr('aria-valuenow', i).css('width', ((100 / __TOTALE_PAGINE) * i) + '%');            timeout(i, tot);        } else {            $('#_avanzamento').attr('aria-valuenow', i).css('width', ((100 / __TOTALE_PAGINE) * i) + '%');            $('#_processing').modal('hide');        }    }, 4000);}function clearGalleryTmp() {    $.get(window.location.href.split('#')[0] + "res/actions.php?action=clearGalleryTmp");}function deleteImg(img) {    $.get(window.location.href.split('#')[0] + "res/actions.php?action=deleteImg&img=" + img);    $("#" + img.replace('.', '_')).fadeOut(300, function () {        $(this).remove();    });}function getGalleryTmp() {    $("#_gal_load").show();    $.get(window.location.href.split('#')[0] + "res/actions.php?action=getGalleryTmp", function (data) {        var obj = JSON.parse(data);        var box = '', tmp;        $.each(obj, function (index, value) {            tmp = $("#_imgbox").html();            tmp = tmp.replace(/%IMGPATH%/g, window.location.href.split('#')[0] + 'images/' + value + '?d=' + new Date().getTime());            tmp = tmp.replace('[IMG]', value.replace('.', '_'));            tmp = tmp.replace(/%IMG%/g, value);            box += tmp;        });        if (box.length > 0) {            $("#_img_list").fadeIn(300, function () {                $("#_img_list").empty();                $("#_img_list").html(box);            });            $("#_list_tools").show();                    }        $("#_gal_load").hide();        console.log(obj);    });}$("#_btn_clear_all").on('click', function () {    $("#_img_list").fadeOut(300, function () {        clearGalleryTmp();        $("#_list_tools").hide();    });});// Upon click this should should trigger click on the #file-to-upload file input element// This is better than showing the not-good-looking file input element$("#upload-button").on('click', function () {    $("#file-to-upload").trigger('click');});// When user chooses a PDF file$("#file-to-upload").on('change', function () {    // Validate whether PDF    if (['application/pdf'].indexOf($("#file-to-upload").get(0).files[0].type) == -1) {        alert('Error : Not a PDF');        return;    }    //$("#upload-button").hide();    // Send the object url of the pdf    showPDF(URL.createObjectURL($("#file-to-upload").get(0).files[0]));});// Previous page of the PDF$("#pdf-prev").on('click', function () {    if (__PAGINA_CORRENTE != 1)        showPage(--__PAGINA_CORRENTE);});// Next page of the PDF$("#pdf-next").on('click', function () {    if (__PAGINA_CORRENTE != __TOTALE_PAGINE)        showPage(++__PAGINA_CORRENTE);});// Download button$("#download-image").on('click', function () {    $(this).attr('href', __CANVAS.toDataURL()).attr('download', 'page.png');});$("#_zippaescarica").on('click', function () {    if ($('#_img_list').is(':empty')) {        $('#_saveMsg').modal('show');        $('#_msgTitolo').text('Warning!');        $('#_msgTesto').html('The gallery is empty.');    } else {        $.ajax({            url: window.location.href.split('#')[0] + "res/actions.php?action=zippaescarica",            dataType: 'JSON',            success: function (response) {                console.log(response);                if (response.zip) {                    location.href = response.zip;                }            }        });    }});$("#_larghezza_px").blur(function () {    if ($("#_larghezza_px").val().trim() == "" || $("#_larghezza_px").val() <= 0) {        $("#_larghezza_px").val('900');    }    if (parseInt($("#_larghezza_px").val()) > 1080) {        $("#_larghezza_px").val('1080');    }});$(document).ready(function () {    $("#_list_tools").hide();    $("#_gal_load").hide();    $("#_clear_before").prop('checked', true);    //$("#_list_tools").    $("#_larghezza_px").keydown(function (e) {        // Allow: backspace, delete, tab, escape, enter and .        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||                // Allow: Ctrl/cmd+A                        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||                        // Allow: Ctrl/cmd+C                                (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||                                // Allow: Ctrl/cmd+X                                        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||                                        // Allow: home, end, left, right                                                (e.keyCode >= 35 && e.keyCode <= 39)) {                                    // let it happen, don't do anything                                    return;                                }                                // Ensure that it is a number and stop the keypress                                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {                                    e.preventDefault();                                }                            });                    getGalleryTmp();                });